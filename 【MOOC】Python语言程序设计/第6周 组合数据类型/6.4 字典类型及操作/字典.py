# 映射   
# - 映射是一种键(索引)和值(数据)的对应
# - 键值对：键是数据索引的扩展
# - 字典是键值对的集合，键值对之间无序
# 采用 {} 和 dict()创建，键值对之间用冒号 :  表示
# <键1>:<值1>, <键2>:<值2>, ...., <键n>:<值n>
# 在字典变量中，通过键获得值
# [] 用来向字典变量中索引或增加元素

d = {"中国":"北京", "美国":"华盛顿", "法国":"巴黎"}
print(d)
print(d['中国'])

# 生成一个空字典
de = {}
type(de)    # type(x) 返回变量x的类型


'''
del d[k]        删除字典d中键k对应的数据值
k in d          判断键k是否在字典d中，如果在返回Ture，否则返回False
d.keys()        返回字典d中所有的键信息
d.values()      返回字典d中所有的值信息
d.items()       返回字典d中所有的键值对信息
'''
d = {"中国":"北京", "美国":"华盛顿", "法国":"巴黎"}
print("中国" in d)
print(d.keys())
print(d.values())

'''
d.get(k, <default>)     键k存在，则返回相应值，不在则返回<default>值
d.pop(k, <default>)     键k存在，取出相应值，不在则返回<default>值
d.popitem()             随机从字典d中取出一个键值对，以元组形式返回
d.clear()               删除所有的键值对
len(d)                  返回字典d中的元素个数
''' 
d = {"中国":"北京", "美国":"华盛顿", "法国":"巴黎"}
print(d.get("中国", "伊斯兰堡"))
print(d.get("巴基斯坦", "伊斯兰堡"))
print(d.popitem())


print()
# 定义字典d
d = {}
# 向d新增2个键值对元素
d["a"]=1; d["b"]=2
# 修改第2个元素 （字典中无顺序）
d["b"] = 3
# 判定字符串“c”是否是d的键
print("c" in d)
# 计算d的长度
print(len(d))
# 清空d
d.clear()


# 映射的表达
# - 映射无处不在，键值对无处不在
# - 例如：统计数据出现的次数，数据是键，次数是值
# - 最主要作用：表达键值对数据，进而操作他们